---
import SuggestionDisplay from "../../components/SuggestionDisplay.svelte";
import LanguageToggle from "../../components/LanguageToggle.svelte"; // Import the toggle
import "../../styles/global.css";
import { validMbtiTypes } from "../../lib/mbtiTypes";
import {
  REPO_URL,
  AUTHOR_NAME,
  COPYRIGHT_YEAR,
  APP_NAME,
  APP_DESCRIPTION,
  APP_KEYWORDS,
  APP_URL,
} from "../../lib/constants";
import Main from "../../layouts/main.astro";

export const prerender = true;

// Get the MBTI type from the URL parameters
const { mbti } = Astro.params;

// MBTI type descriptions and icons - same as in MbtiSelector for consistency
const mbtiInfo = {
  INFP: {
    icon: "ü¶Ñ",
    description: "Â§¢ÊÉ≥ÂÆ∂",
    bgColor: "bg-purple-50",
    textColor: "text-purple-700",
    iconBg: "bg-purple-100",
  },
  INFJ: {
    icon: "üîÆ",
    description: "Êô∫ËÄÖ",
    bgColor: "bg-purple-50",
    textColor: "text-purple-800",
    iconBg: "bg-purple-100",
  },
  INTP: {
    icon: "üß†",
    description: "ÊÄùÊÉ≥ÂÆ∂",
    bgColor: "bg-pink-50",
    textColor: "text-pink-700",
    iconBg: "bg-pink-100",
  },
  INTJ: {
    icon: "üß©",
    description: "Á≠ñÁï•ÂÆ∂",
    bgColor: "bg-green-50",
    textColor: "text-green-700",
    iconBg: "bg-green-100",
  },
  ISFP: {
    icon: "üé®",
    description: "ËóùË°ìÂÆ∂",
    bgColor: "bg-yellow-50",
    textColor: "text-amber-700",
    iconBg: "bg-amber-100",
  },
  ISFJ: {
    icon: "üè°",
    description: "ÂÆàË≠∑ËÄÖ",
    bgColor: "bg-yellow-50",
    textColor: "text-amber-800",
    iconBg: "bg-amber-100",
  },
  ISTP: {
    icon: "üîß",
    description: "Â∑•Âå†",
    bgColor: "bg-blue-50",
    textColor: "text-blue-700",
    iconBg: "bg-blue-100",
  },
  ISTJ: {
    icon: "üìä",
    description: "Ê™¢Êü•ËÄÖ",
    bgColor: "bg-blue-50",
    textColor: "text-blue-800",
    iconBg: "bg-blue-100",
  },
  ENFP: {
    icon: "‚ú®",
    description: "ÂÜíÈö™ÂÆ∂",
    bgColor: "bg-yellow-50",
    textColor: "text-yellow-700",
    iconBg: "bg-yellow-100",
  },
  ENFJ: {
    icon: "üåü",
    description: "‰∏ªËßí",
    bgColor: "bg-yellow-50",
    textColor: "text-yellow-800",
    iconBg: "bg-yellow-100",
  },
  ENTP: {
    icon: "üí°",
    description: "ËæØË´ñÂÆ∂",
    bgColor: "bg-orange-50",
    textColor: "text-orange-700",
    iconBg: "bg-orange-100",
  },
  ENTJ: {
    icon: "üëë",
    description: "ÊåáÊèÆÂÆò",
    bgColor: "bg-orange-50",
    textColor: "text-orange-800",
    iconBg: "bg-orange-100",
  },
  ESFP: {
    icon: "üé≠",
    description: "Ë°®ÊºîËÄÖ",
    bgColor: "bg-red-50",
    textColor: "text-red-700",
    iconBg: "bg-red-100",
  },
  ESFJ: {
    icon: "ü§ù",
    description: "Âü∑Ë°åËÄÖ",
    bgColor: "bg-yellow-50",
    textColor: "text-yellow-800",
    iconBg: "bg-yellow-100",
  },
  ESTP: {
    icon: "üèÑ",
    description: "‰ºÅÊ•≠ÂÆ∂",
    bgColor: "bg-orange-50",
    textColor: "text-orange-700",
    iconBg: "bg-orange-100",
  },
  ESTJ: {
    icon: "‚öñÔ∏è",
    description: "ÁÆ°ÁêÜËÄÖ",
    bgColor: "bg-blue-50",
    textColor: "text-blue-800",
    iconBg: "bg-blue-100",
  },
};

// Get current MBTI info
const currentMbti = mbtiInfo[mbti as keyof typeof mbtiInfo];
const bgColorClass = currentMbti?.bgColor || "bg-gray-50";

export async function getStaticPaths() {
  return validMbtiTypes.map((type) => ({
    params: { mbti: type },
  }));
}
---

<Main
  content={{
    title: `${APP_NAME} - ${mbti} Food Recommendation`,
    description: `${mbti} ${APP_DESCRIPTION}`,
    keywords: `${mbti}, MBTI, È£≤È£üÊé®Ëñ¶, ${APP_KEYWORDS}`,
    url: `${APP_URL}suggestion`,
  }}
>
  <main
    class={`${bgColorClass} min-h-screen flex flex-col items-center py-8 px-4`}
  >
    <!-- Header Section -->
    <div class="w-full max-w-4xl mx-auto mb-8">
      <div class="flex flex-col md:flex-row items-center justify-between">
        <div class="flex items-center gap-4">
          <a
            href="/"
            class={`${currentMbti?.textColor} bg-white self-start shadow-sm hover:shadow-md font-medium py-2 px-5 rounded-full transition-all duration-300 flex items-center`}
          >
            <span class="text-lg">‚Üê</span>
          </a>
          <LanguageToggle client:load />
          {/* Add toggle here */}
        </div>

        <div class="flex items-center mt-4 md:mt-0">
          <div
            class={`w-12 h-12 flex items-center justify-center ${currentMbti?.iconBg} rounded-full mr-3`}
          >
            <span transition:name=`icon-${mbti}` class="text-2xl">{currentMbti?.icon}</span>
          </div>
          <h1
            class={`text-2xl md:text-3xl font-bold ${currentMbti?.textColor}`}
          >
          <span transition:name={`title-${mbti}`}>
            {mbti}
          </span>
            <span
              transition:name={`description-${mbti}`}
              class={`text-lg md:text-xl font-normal ${currentMbti?.textColor} opacity-80`}
              >{currentMbti?.description}</span
            >
          </h1>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <SuggestionDisplay {mbti} client:load />

    <!-- Footer -->
    <footer class="mt-10 text-center text-sm">
      <a
        href={REPO_URL}
        target="_blank"
        rel="noopener noreferrer"
        class={`bg-white shadow-sm px-4 py-2 rounded-full inline-flex items-center gap-1 ${currentMbti?.textColor} hover:opacity-80 transition-colors`}
      >
        <img src="/github-icon.svg" alt="GitHub" class="w-5 h-5" />
        <p class={`${currentMbti?.textColor} inline-block`}>
          ¬© {COPYRIGHT_YEAR}
          {APP_NAME} | {AUTHOR_NAME}
        </p>
      </a>
    </footer>
  </main>
</Main>
